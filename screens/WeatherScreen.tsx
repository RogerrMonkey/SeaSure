import React, { useEffect, useState } from "react"
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  RefreshControl, 
  Alert, 
  Animated,
  TouchableOpacity,
  Dimensions,
  SafeAreaView
} from "react-native"
import { LinearGradient } from 'expo-linear-gradient'
import { Card, Badge } from "../components/ui"
import { EnhancedCard, ModernButton, ProfessionalBadge, LoadingOverlay, StatsCard } from "../components/modernUI"
import { theme } from "../theme/colors"
import { Ionicons } from "@expo/vector-icons"
import * as Location from "expo-location"
import { weatherService, type MarineWeather } from "../services/weather"

const { width, height } = Dimensions.get('window')

// Enhanced design system for Weather Screen
const weatherDesign = {
  spacing: {
    xs: width * 0.01,
    sm: width * 0.02,
    md: width * 0.04,
    lg: width * 0.06,
    xl: width * 0.08,
  },
  borderRadius: {
    sm: 8,
    md: 12,
    lg: 16,
    xl: 20,
  },
  typography: {
    h1: Math.min(width * 0.08, 32),
    h2: Math.min(width * 0.06, 24),
    h3: Math.min(width * 0.05, 20),
    body: Math.min(width * 0.04, 16),
    caption: Math.min(width * 0.035, 14),
    small: Math.min(width * 0.03, 12),
  },
  shadows: {
    light: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
      elevation: 3,
    },
    medium: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 4 },
      shadowOpacity: 0.15,
      shadowRadius: 8,
      elevation: 5,
    },
  },
  colors: {
    primary: '#0F766E',
    primaryLight: '#14B8A6',
    secondary: '#0891B2',
    accent: '#F59E0B',
    success: '#10B981',
    warning: '#F59E0B',
    error: '#EF4444',
    surface: '#FFFFFF',
    surfaceSecondary: '#F8FAFC',
    text: '#1F2937',
    textSecondary: '#6B7280',
    textLight: '#9CA3AF',
  }
}

export default function WeatherScreen() {
  const [weather, setWeather] = useState<MarineWeather | null>(null)
  const [loading, setLoading] = useState(false)
  const [refreshing, setRefreshing] = useState(false)
  const [position, setPosition] = useState<{ lat: number; lon: number } | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [showQuickActions, setShowQuickActions] = useState(false)
  const fadeAnim = useState(new Animated.Value(0))[0]

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start()
  }, [])

  const fetchWeatherData = async () => {
    if (!position) return
    
    setLoading(true)
    setError(null)
    
    try {
      const data = await weatherService.getCurrentWeather(position.lat, position.lon)
      setWeather(data)
    } catch (err) {
      console.error("Weather fetch error:", err)
      setError("Failed to fetch weather data. Please check your internet connection.")
    } finally {
      setLoading(false)
    }
  }

  const onRefresh = async () => {
    setRefreshing(true)
    await fetchWeatherData()
    setRefreshing(false)
  }

  const quickPlanTrip = () => {
    if (!weather) return
    
    if (weather.fishingConditions === "Dangerous") {
      Alert.alert(
        "⚠️ Dangerous Conditions",
        "Current weather is dangerous for fishing. Please wait for conditions to improve.",
        [{ text: "OK" }]
      )
      return
    }
    
    Alert.alert(
      "🎣 Quick Trip Planning",
      `Weather conditions are ${weather.fishingConditions.toLowerCase()}. Plan a fishing trip now?`,
      [
        { text: "Cancel", style: "cancel" },
        { text: "Plan Trip", onPress: () => {
          console.log("Navigate to trip planner with weather data")
          // Navigate to trip planner screen
        }}
      ]
    )
  }

  const shareWeatherAlert = () => {
    if (!weather) return
    
    const message = `🌊 Marine Weather Alert\n` +
      `Conditions: ${weather.fishingConditions}\n` +
      `Temperature: ${weather.temperature}°C\n` +
      `Wind: ${weather.windSpeed} km/h\n` +
      `Wave Height: ${weather.waveHeight}m\n` +
      `\nGenerated by SeaSure App`
    
    Alert.alert("Share Weather", message, [
      { text: "Cancel", style: "cancel" },
      { text: "Share", onPress: () => console.log("Share weather data") }
    ])
  }

  const getLocation = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync()
      if (status !== "granted") {
        Alert.alert("Permission needed", "Location access is required for marine weather data.")
        return
      }

      const loc = await Location.getCurrentPositionAsync({ 
        accuracy: Location.Accuracy.Balanced 
      })
      
      setPosition({ 
        lat: loc.coords.latitude, 
        lon: loc.coords.longitude 
      })
    } catch (error) {
      console.error("Location error:", error)
      setError("Could not get your location. Using default coordinates.")
      // Default to Mumbai coast
      setPosition({ lat: 19.0760, lon: 72.8777 })
    }
  }

  useEffect(() => {
    getLocation()
  }, [])

  useEffect(() => {
    if (position) {
      fetchWeatherData()
    }
  }, [position])

  const getConditionIcon = (condition: string) => {
    switch (condition) {
      case "Excellent": return "sunny"
      case "Good": return "partly-sunny"
      case "Poor": return "cloudy"
      case "Dangerous": return "thunderstorm"
      default: return "help-circle"
    }
  }

  const getConditionColor = (condition: string) => {
    switch (condition) {
      case "Excellent": return "#10b981"
      case "Good": return "#3b82f6"
      case "Poor": return "#f59e0b"
      case "Dangerous": return "#ef4444"
      default: return theme.muted
    }
  }

  if (error && !weather) {
    return (
      <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
        <View style={styles.centerContent}>
          <Ionicons name="warning" size={64} color={theme.warn} />
          <Text style={styles.errorTitle}>Unable to Load Weather</Text>
          <Text style={styles.errorText}>{error}</Text>
          <ModernButton
            title="Retry"
            icon="refresh"
            onPress={fetchWeatherData}
            style={styles.retryButton}
          />
        </View>
      </Animated.View>
    )
  }

  return (
    <SafeAreaView style={styles.safeArea}>
      <Animated.View style={[styles.container, { opacity: fadeAnim }]}>
        <ScrollView 
          showsVerticalScrollIndicator={false}
          refreshControl={
            <RefreshControl 
              refreshing={refreshing} 
              onRefresh={onRefresh}
              tintColor={weatherDesign.colors.primary}
            colors={[theme.primary]}
          />
        }
        contentContainerStyle={styles.scrollContent}
      >
        {/* Header Section */}
        <View style={styles.header}>
          <View style={styles.headerLeft}>
            <Text style={styles.headerTitle}>Marine Weather</Text>
            <Text style={styles.headerSubtitle}>Real-time fishing conditions</Text>
          </View>
          
          {weather && (
            <TouchableOpacity 
              style={styles.headerAction}
              onPress={() => setShowQuickActions(!showQuickActions)}
            >
              <Ionicons name="ellipsis-vertical" size={24} color={theme.primary} />
            </TouchableOpacity>
          )}
        </View>

        {/* Quick Actions */}
        {showQuickActions && weather && (
          <Animated.View style={styles.quickActionsPanel}>
            <TouchableOpacity style={styles.quickAction} onPress={quickPlanTrip}>
              <Ionicons name="navigate" size={20} color={theme.primary} />
              <Text style={styles.quickActionText}>Plan Trip</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.quickAction} onPress={shareWeatherAlert}>
              <Ionicons name="share" size={20} color={theme.primary} />
              <Text style={styles.quickActionText}>Share Alert</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.quickAction} onPress={onRefresh}>
              <Ionicons name="refresh" size={20} color={theme.primary} />
              <Text style={styles.quickActionText}>Refresh</Text>
            </TouchableOpacity>
          </Animated.View>
        )}
        
        {position && (
          <View style={styles.locationContainer}>
            <Ionicons name="location" size={16} color={theme.primary} />
            <Text style={styles.locationText}>
              {position.lat.toFixed(4)}°N, {position.lon.toFixed(4)}°E
            </Text>
          </View>
        )}

        {weather ? (
          <>
            {/* Modern Weather Header with Gradient */}
            <LinearGradient
              colors={[weatherDesign.colors.primary, weatherDesign.colors.primaryLight]}
              style={styles.header}
            >
              <Text style={styles.headerTitle}>Marine Weather</Text>
              <Text style={styles.headerSubtitle}>Real-time fishing conditions</Text>
              
              {position && (
                <View style={styles.locationContainer}>
                  <Ionicons name="location" size={16} color="rgba(255, 255, 255, 0.9)" />
                  <Text style={styles.locationText}>
                    {position.lat.toFixed(4)}°N, {position.lon.toFixed(4)}°E
                  </Text>
                </View>
              )}
            </LinearGradient>

            {/* Hero Weather Card */}
            <View style={styles.heroWeatherCard}>
              <LinearGradient
                colors={['#E0F2FE', '#F0F9FF']}
                style={styles.heroCardContent}
              >
                <View style={styles.weatherIconContainer}>
                  <Ionicons 
                    name={getConditionIcon(weather.fishingConditions)} 
                    size={width * 0.15} 
                    color={getConditionColor(weather.fishingConditions)} 
                  />
                </View>
                <Text style={styles.heroTemperature}>{weather.temperature}°C</Text>
                <View style={styles.conditionBadge}>
                  <Text style={styles.conditionText}>{weather.fishingConditions}</Text>
                </View>
              </LinearGradient>
            </View>

            {/* Responsive Weather Metrics Grid */}
            <View style={styles.weatherMetricsGrid}>
              <View style={styles.metricCard}>
                <LinearGradient
                  colors={[weatherDesign.colors.primary, weatherDesign.colors.primaryLight]}
                  style={styles.metricIconContainer}
                >
                  <Ionicons name="speedometer" size={24} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.metricValue}>{weather.windSpeed}</Text>
                <Text style={styles.metricUnit}>km/h</Text>
                <Text style={styles.metricLabel}>Wind Speed</Text>
                <Text style={styles.metricSubtext}>{weather.windDirection}° direction</Text>
              </View>

              <View style={styles.metricCard}>
                <LinearGradient
                  colors={[weatherDesign.colors.secondary, '#38BDF8']}
                  style={styles.metricIconContainer}
                >
                  <Ionicons name="water" size={24} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.metricValue}>{weather.waveHeight}</Text>
                <Text style={styles.metricUnit}>m</Text>
                <Text style={styles.metricLabel}>Wave Height</Text>
              </View>

              <View style={styles.metricCard}>
                <LinearGradient
                  colors={[weatherDesign.colors.success, '#34D399']}
                  style={styles.metricIconContainer}
                >
                  <Ionicons name="eye" size={24} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.metricValue}>{weather.visibility}</Text>
                <Text style={styles.metricUnit}>km</Text>
                <Text style={styles.metricLabel}>Visibility</Text>
              </View>

              <View style={styles.metricCard}>
                <LinearGradient
                  colors={[weatherDesign.colors.accent, '#FCD34D']}
                  style={styles.metricIconContainer}
                >
                  <Ionicons name="water-outline" size={24} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.metricValue}>{weather.humidity}</Text>
                <Text style={styles.metricUnit}>%</Text>
                <Text style={styles.metricLabel}>Humidity</Text>
              </View>
            </View>

            {/* Additional Weather Information */}
            <View style={styles.additionalInfoContainer}>
              <View style={styles.infoCard}>
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Pressure</Text>
                  <Text style={styles.infoValue}>{weather.pressure} hPa</Text>
                </View>
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>UV Index</Text>
                  <Text style={styles.infoValue}>{weather.uvIndex}</Text>
                </View>
              </View>
            </View>

            {/* Weather Warnings */}
            {weather.warnings.length > 0 && (
              <View style={styles.warningsCard}>
                <View style={styles.warningsHeader}>
                  <LinearGradient
                    colors={[weatherDesign.colors.warning, '#FCD34D']}
                    style={styles.warningIconContainer}
                  >
                    <Ionicons name="warning" size={20} color="#FFFFFF" />
                  </LinearGradient>
                  <Text style={styles.warningsTitle}>Weather Alerts</Text>
                </View>
                <View style={styles.warningsList}>
                  {weather.warnings.map((warning, index) => (
                    <View key={index} style={styles.warningItem}>
                      <Ionicons name="alert-circle" size={16} color={weatherDesign.colors.warning} />
                      <Text style={styles.warningText}>{warning}</Text>
                    </View>
                  ))}
                </View>
              </View>
            )}

            {/* AI Fishing Recommendations */}
            <View style={styles.recommendationsCard}>
              <View style={styles.recommendationHeader}>
                <LinearGradient
                  colors={[weatherDesign.colors.primary, weatherDesign.colors.primaryLight]}
                  style={styles.fishIconContainer}
                >
                  <Ionicons name="fish" size={20} color="#FFFFFF" />
                </LinearGradient>
                <Text style={styles.recommendationsTitle}>Fishing Insights</Text>
              </View>
              <Text style={styles.recommendationsText}>
                {weather.fishingConditions === "Excellent" && "🎣 Perfect conditions for deep sea fishing! Calm waters and excellent visibility make this ideal for all fishing techniques."}
                {weather.fishingConditions === "Good" && "🌊 Good fishing conditions detected. Standard safety precautions recommended for offshore activities."}
                {weather.fishingConditions === "Poor" && "⚠️ Challenging conditions ahead. Consider staying closer to shore or postponing until conditions improve."}
                {weather.fishingConditions === "Dangerous" && "🚨 Dangerous conditions! Return to shore immediately and avoid all fishing activities until weather improves."}
              </Text>
            </View>
          </>
        ) : (
          <View style={styles.centerContent}>
            <Ionicons name="cloud-download" size={64} color={theme.muted} />
            <Text style={styles.loadingTitle}>Loading Weather Data</Text>
            <Text style={styles.loadingText}>Fetching real-time marine conditions...</Text>
          </View>
        )}
      </ScrollView>
      
      {/* Loading Overlay */}
      {loading && <LoadingOverlay visible={true} message="Updating weather data..." />}
      </Animated.View>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: weatherDesign.colors.surface,
  },
  container: {
    flex: 1,
    backgroundColor: weatherDesign.colors.surfaceSecondary,
  },
  scrollContent: {
    paddingBottom: weatherDesign.spacing.xl,
  },
  header: {
    paddingHorizontal: weatherDesign.spacing.md,
    paddingVertical: weatherDesign.spacing.lg,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: weatherDesign.typography.h1,
    fontWeight: '800',
    color: '#FFFFFF',
    marginBottom: 4,
    letterSpacing: 0.5,
  },
  headerSubtitle: {
    fontSize: weatherDesign.typography.caption,
    color: 'rgba(255, 255, 255, 0.9)',
    fontWeight: '500',
    marginBottom: weatherDesign.spacing.sm,
  },
  locationContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    marginTop: weatherDesign.spacing.xs,
  },
  locationText: {
    fontSize: weatherDesign.typography.small,
    color: 'rgba(255, 255, 255, 0.8)',
    fontWeight: '500',
  },
  heroWeatherCard: {
    marginHorizontal: weatherDesign.spacing.md,
    marginVertical: weatherDesign.spacing.md,
    borderRadius: weatherDesign.borderRadius.xl,
    overflow: 'hidden',
    ...weatherDesign.shadows.medium,
  },
  heroCardContent: {
    alignItems: 'center',
    paddingVertical: weatherDesign.spacing.xl,
    paddingHorizontal: weatherDesign.spacing.lg,
  },
  weatherIconContainer: {
    width: Math.min(width * 0.25, 120),
    height: Math.min(width * 0.25, 120),
    borderRadius: Math.min(width * 0.125, 60),
    backgroundColor: 'rgba(15, 118, 110, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: weatherDesign.spacing.md,
  },
  heroTemperature: {
    fontSize: Math.min(width * 0.15, 48),
    fontWeight: '900',
    color: weatherDesign.colors.text,
    marginBottom: weatherDesign.spacing.sm,
  },
  conditionBadge: {
    backgroundColor: weatherDesign.colors.primary,
    paddingHorizontal: weatherDesign.spacing.md,
    paddingVertical: weatherDesign.spacing.sm,
    borderRadius: weatherDesign.borderRadius.lg,
  },
  conditionText: {
    fontSize: weatherDesign.typography.body,
    fontWeight: '700',
    color: '#FFFFFF',
  },
  weatherMetricsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    paddingHorizontal: weatherDesign.spacing.md,
    gap: weatherDesign.spacing.sm,
    marginBottom: weatherDesign.spacing.md,
  },
  metricCard: {
    width: (width - (weatherDesign.spacing.md * 2) - weatherDesign.spacing.sm) / 2,
    backgroundColor: weatherDesign.colors.surface,
    borderRadius: weatherDesign.borderRadius.lg,
    padding: weatherDesign.spacing.md,
    alignItems: 'center',
    ...weatherDesign.shadows.light,
    minHeight: height * 0.15,
  },
  metricIconContainer: {
    width: Math.min(width * 0.12, 48),
    height: Math.min(width * 0.12, 48),
    borderRadius: Math.min(width * 0.06, 24),
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: weatherDesign.spacing.sm,
  },
  metricValue: {
    fontSize: Math.min(width * 0.06, 24),
    fontWeight: '800',
    color: weatherDesign.colors.text,
  },
  metricUnit: {
    fontSize: weatherDesign.typography.small,
    color: weatherDesign.colors.textLight,
    fontWeight: '500',
  },
  metricLabel: {
    fontSize: weatherDesign.typography.caption,
    color: weatherDesign.colors.textSecondary,
    fontWeight: '600',
    textAlign: 'center',
    marginTop: weatherDesign.spacing.xs,
  },
  metricSubtext: {
    fontSize: weatherDesign.typography.small,
    color: weatherDesign.colors.textLight,
    textAlign: 'center',
    marginTop: 2,
  },
  additionalInfoContainer: {
    paddingHorizontal: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.md,
  },
  infoCard: {
    backgroundColor: weatherDesign.colors.surface,
    borderRadius: weatherDesign.borderRadius.lg,
    padding: weatherDesign.spacing.md,
    ...weatherDesign.shadows.light,
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: weatherDesign.spacing.sm,
    borderBottomWidth: 1,
    borderBottomColor: '#F3F4F6',
  },
  infoLabel: {
    fontSize: weatherDesign.typography.body,
    color: weatherDesign.colors.textSecondary,
    fontWeight: '500',
  },
  infoValue: {
    fontSize: weatherDesign.typography.body,
    color: weatherDesign.colors.text,
    fontWeight: '700',
  },
  warningsCard: {
    backgroundColor: weatherDesign.colors.surface,
    borderRadius: weatherDesign.borderRadius.lg,
    marginHorizontal: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.md,
    padding: weatherDesign.spacing.md,
    ...weatherDesign.shadows.light,
  },
  warningsHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: weatherDesign.spacing.sm,
    marginBottom: weatherDesign.spacing.sm,
  },
  warningIconContainer: {
    width: Math.min(width * 0.09, 36),
    height: Math.min(width * 0.09, 36),
    borderRadius: Math.min(width * 0.045, 18),
    justifyContent: 'center',
    alignItems: 'center',
  },
  warningsTitle: {
    fontSize: weatherDesign.typography.h3,
    fontWeight: '700',
    color: weatherDesign.colors.text,
  },
  warningsList: {
    gap: weatherDesign.spacing.sm,
  },
  warningItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: weatherDesign.spacing.sm,
    padding: weatherDesign.spacing.sm,
    backgroundColor: '#FEF3C7',
    borderRadius: weatherDesign.borderRadius.sm,
  },
  warningText: {
    fontSize: weatherDesign.typography.caption,
    color: weatherDesign.colors.text,
    flex: 1,
  },
  recommendationsCard: {
    backgroundColor: weatherDesign.colors.surface,
    borderRadius: weatherDesign.borderRadius.lg,
    marginHorizontal: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.md,
    padding: weatherDesign.spacing.md,
    ...weatherDesign.shadows.light,
  },
  recommendationHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: weatherDesign.spacing.sm,
    marginBottom: weatherDesign.spacing.sm,
  },
  fishIconContainer: {
    width: Math.min(width * 0.09, 36),
    height: Math.min(width * 0.09, 36),
    borderRadius: Math.min(width * 0.045, 18),
    justifyContent: 'center',
    alignItems: 'center',
  },
  recommendationsTitle: {
    fontSize: weatherDesign.typography.h3,
    fontWeight: '700',
    color: weatherDesign.colors.text,
  },
  recommendationsText: {
    fontSize: weatherDesign.typography.body,
    color: weatherDesign.colors.textSecondary,
    lineHeight: Math.min(width * 0.055, 22),
  },
  centerContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: weatherDesign.spacing.xl,
  },
  loadingTitle: {
    fontSize: weatherDesign.typography.h2,
    fontWeight: '700',
    color: weatherDesign.colors.text,
    marginTop: weatherDesign.spacing.md,
    marginBottom: weatherDesign.spacing.sm,
  },
  loadingText: {
    fontSize: weatherDesign.typography.body,
    color: weatherDesign.colors.textSecondary,
    textAlign: 'center',
  },
  errorTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: theme.fg,
    marginTop: 16,
    marginBottom: 8,
  },
  errorText: {
    fontSize: 16,
    color: theme.muted,
    textAlign: "center",
    marginBottom: 24,
  },
  retryButton: {
    marginTop: 16,
  },
  loadingTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: theme.fg,
    marginTop: 16,
  },
  loadingText: {
    fontSize: 16,
    color: theme.muted,
    marginTop: 8,
    textAlign: 'center',
  },
  mainCard: {
    marginBottom: 24,
  },
  conditionsHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 12,
  },
  conditionsInfo: {
    flex: 1,
    marginLeft: 16,
  },
  temperature: {
    fontSize: 36,
    fontWeight: "700",
    color: theme.fg,
    marginBottom: 12,
  },
  statsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
    marginBottom: 24,
  },
  infoCard: {
    marginBottom: 20,
  },
  infoTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: theme.fg,
    marginBottom: 16,
    flexDirection: 'row',
    alignItems: 'center',
  },
  infoGrid: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  infoItem: {
    flex: 1,
    alignItems: 'center',
  },
  infoLabel: {
    fontSize: 14,
    color: theme.muted,
    marginBottom: 4,
  },
  infoValue: {
    fontSize: 18,
    fontWeight: '600',
    color: theme.fg,
  },
  warningsCard: {
    borderLeftWidth: 4,
    borderLeftColor: theme.warn,
    marginBottom: 20,
  },
  warningsHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 16,
  },
  warningsTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: theme.fg,
    marginLeft: 12,
  },
  warningsList: {
    gap: 12,
  },
  warningItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  warningText: {
    fontSize: 14,
    color: theme.fg,
    flex: 1,
  },
  recommendationsCard: {
    backgroundColor: theme.card,
    borderWidth: 1,
    borderColor: theme.primary,
    marginBottom: 20,
  },
  recommendationHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
    gap: 12,
  },
  recommendationsTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: theme.primary,
  },
  recommendationsText: {
    fontSize: 16,
    color: theme.fg,
    lineHeight: 24,
  },
  
  // Enhanced UI styles
  headerLeft: {
    flex: 1,
  },
  headerAction: {
    padding: 8,
    borderRadius: 8,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
  },
  quickActionsPanel: {
    flexDirection: 'row',
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    gap: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  quickAction: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 12,
    backgroundColor: 'rgba(15, 118, 110, 0.1)',
  },
  quickActionText: {
    fontSize: 14,
    fontWeight: '600',
    color: theme.primary,
  },
})
